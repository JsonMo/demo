package com.cobazaar.blastingmonitoring.module.user.utils;

import com.cobazaar.blastingmonitoring.module.user.po.ActionPO;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;

/**
 * 权限数据处理
 * 
 * @author meng
 */
public class TreeUtils
{
    /**
     * 根据父节点的ID获取所有子节点
     * 
     * @param list 分类表
     * @param i 传入的父节点ID
     * @return String
     */
    public static List<ActionPO> getChildPerms(List<ActionPO> list, String i)
    {
        List<ActionPO> returnList = new ArrayList<ActionPO>();
        for (Iterator<ActionPO> iterator = list.iterator(); iterator.hasNext();)
        {
            ActionPO t = iterator.next();
            // 一、根据传入的某个父节点ID,遍历该父节点的所有子节点
            if (Objects.equals(t.getParentId(),i))
            {
                 recursionFn(list, t);
                returnList.add(t);
            }
        }
        return returnList;
    }

    /**
     * 递归列表
     * 
     * @param list
     * @param t
     */
    private static void recursionFn(List<ActionPO> list, ActionPO t)
    {
        // 得到子节点列表
        List<ActionPO> childList = getChildList(list, t);//得到按钮t所有的子按钮
        t.setActionPOList(childList);
        for (ActionPO tChild : childList)
        {
            if (hasChild(list, tChild))//判断是否有子按钮
            {
                // 判断是否有子节点
                Iterator<ActionPO> it = childList.iterator();
                while (it.hasNext())
                {
                    ActionPO n = it.next();
                    recursionFn(list, n);
                }
            }
        }
    }

    /**
     * 得到子节点列表
     */
    private static List<ActionPO> getChildList(List<ActionPO> list, ActionPO t)
    {

        List<ActionPO> tlist = new ArrayList<ActionPO>();
        Iterator<ActionPO> it = list.iterator();
        while (it.hasNext())
        {
            ActionPO n = it.next();
            if (Objects.equals(n.getParentId(), t.getId()))
            {
                tlist.add(n);
            }
        }
        tlist.sort((o1,o2)->o1.getNo()-o2.getNo());
        return tlist;
    }

    List<ActionPO> returnList = new ArrayList<ActionPO>();

    /**
     * 根据父节点的ID获取所有子节点
     * 
     * @param list 分类表
     * @param typeId 传入的父节点ID
     * @param prefix 子节点前缀
     */
    public List<ActionPO> getChildPerms(List<ActionPO> list, String typeId, String prefix)
    {
        if (list == null)
        {
            return null;
        }
        for (Iterator<ActionPO> iterator = list.iterator(); iterator.hasNext();)
        {
            ActionPO node = iterator.next();
        	System.out.println("id:"+node.getId());
        	System.out.println("name:"+node.getActionName());
            // 一、根据传入的某个父节点ID,遍历该父节点的所有子节点
            if (Objects.equals(node.getParentId(),typeId))
            {
                recursionFn(list, node, prefix);
            }
            // 二、遍历所有的父节点下的所有子节点
            /*
             * if (node.getParentId()==0) { recursionFn(list, node); }
             */
        }
        return returnList;
    }

    private void recursionFn(List<ActionPO> list, ActionPO node, String p)  {
        // 得到子节点列表
        List<ActionPO> childList = getChildList(list, node);
        if (hasChild(list, node))
        {
            // 判断是否有子节点
            returnList.add(node);
            Iterator<ActionPO> it = childList.iterator();
            while (it.hasNext())
            {
                ActionPO n = it.next();
                n.setActionName(p + n.getActionName());
                recursionFn(list, n, p + p);
            }
        }
        else
        {
            returnList.add(node);
        }
    }

    /**
     * 判断是否有子节点
     */
    private static boolean hasChild(List<ActionPO> list, ActionPO t)
    {
        return getChildList(list, t).size() > 0 ? true : false;
    }
}
